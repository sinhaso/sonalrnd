docker info
docker pull ubuntu
docker ps
docker ps -a
docker images

docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]

docker logs [CONTAINER ID]
docker stop [CONTAINER ID]

 docker --help

 docker attach --help

  docker run -d -P training/webapp python app.py

  Review what the command did. You’ve specified two flags: -d and -P. You’ve already seen the -d flag which tells Docker to run the container in the background. The -P flag is new and tells Docker to map any required network ports inside our container to our host. This lets us view our web application.

You’ve specified an image: training/webapp. This image is a pre-built image you’ve created that contains a simple Python Flask web application.

Lastly, you’ve specified a command for our container to run: python app.py. This launches our web application.


PORTS
0.0.0.0:49155->5000/tcp


In this case Docker has exposed port 5000 (the default Python Flask port) on port 49155.

Network port bindings are very configurable in Docker. In our last example the -P flag is a shortcut for -p 5000 that maps port 5000 inside the container to a high port (from ephemeral port range which typically ranges from 32768 to 61000) on the local Docker host. We can also bind Docker containers to specific ports using the -p flag, for example:



docker run -d -p 80:5000 training/webapp python app.py


This would map port 5000 inside our container to port 80 on our local host. You might be asking about now: why wouldn’t we just want to always use 1:1 port mappings in Docker containers rather than mapping to high ports? Well 1:1 mappings have the constraint of only being able to map one of each port on your local host.

Suppose you want to test two Python applications: both bound to port 5000 inside their own containers. Without Docker’s port mapping you could only access one at a time on the Docker host.